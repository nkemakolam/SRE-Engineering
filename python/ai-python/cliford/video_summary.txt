2 x which is more comfortable to you also I will be creating a Time step in the description so you can check the topics which you want to study and then you can just click on the timestamp it will take you to that section in video in that way you can cover more things okay so I hope that you watch the video till end to understand everything and trust me you won't regret anything for this video because this video is going to be very good to like complete course on Jenkins Okay so let's get started okay team so before starting the implementation part of Jenkins let me explain it to you where does exactly Jenkins fit in devops okay okay so for example let's say we have a application which we want to build and deploy so how does the process go first of all we will plan things then we will get the source code okay then we will build the application then we will integrate several security tools to make sure that everything in source code as well as in the deployed application is running fine then finally we will deploy the application to server and then once the application is deployed we try to manage it so that it it always runs fine and does not crash okay so basically this whole process is devsecops or devops okay first of all like throw away the misconception that devops is a tool devops is a way of building and deploying applications following the best practices so that everything is gets done efficiently okay so now you get the point what exactly is devops or devsecops when I say devsecops that means we we are using several security tools to like secure our source code secure our pipeline secure our deployment and everything okay so everything when we make secure then it is devsecops if you are not using then it's like simply devops okay okay now when we when you listen to the word devops the first thing that comes into your mind is CI CD so what exactly is cicd okay so let's say this part is CI basically okay and when I say CI what exactly it means okay so CI is basically a way in which multiple people can work on the same Project without affecting each other work okay as you know like there are if on a one on one project multiple features are getting added like one by one and multiple people are working so to make sure that everyone is able to work and check their progress like their code is working fine or not and at the same time the original deployed application does not get affected okay so this whole process is CI and this also like includes like automating their builds integrating multiple tools then building the application and then testing it okay this whole process CL and when we deploy the application when we dip yeah so when we deploy the application to a server whichever server we are using that is CD okay when we say CD CD may be may be standing for two words continuous delivery or continuous deployment depending on if deployment was done manually or it was done automatic okay so now you understand like Ci and CD what exactly is there okay now as as I mentioned like this process from building the application integrating multiple tools and deploying it requires multiple tools and Technology okay and if we are having a way in which we can integrate all of them together at one place then it would be very easier right for that reason to integrate all these tools and technology so that we can deploy build and deploy our application efficiently we have CI CD Tools in Market okay so we have like Jenkins then we have a zero devops AWS devops then we have bamboo circle CI and many more but why Jenkins is preferred to be used most this is because first of all Jenkins is completely free secondly Jenkins is very easy to use trust me when I say that and like next we have like Jenkins plugins so when like when we talk about tools integration in Jenkins usually a tool integration in Jenkins is done by using plugins okay and supports more than thousand plugins to be installed that means like thousands of different things we could do and like so many tools we can integrate in gen kills very easily okay and that is one of the that is like one of two reasons why Jenkins is preferred so much first of all it is open source completely free and second of all it can be integrated with most of the tools available okay and that is the reason we are going to learn Jenkins and like Implement everything through Jenkins okay okay now coming to the next section where I will show you how exactly we will set up Jenkins and how we will get started with Jenkins okay also I would request you to not skip the video and watch line by like step by step because every small piece of gen like every small piece of information about Jenkins basically I will show you Hands-On okay and and my thinking is that best way to learn any technology or tool is like directly Hands-On instead of just reading theories and all okay so let's start implementing it okay team so for installing Jenkins I am using a Ubuntu machine on which I will configure Jenkins okay so I have like a free tier subscription on uh Amazon and so have I have created one 8GB Ram machine with 20 GB of storage okay in case you are having a Windows machine then also no issues you can follow the steps given on the official site okay so instead of going here and there just go on Google Search for install Jenkins okay and then like whichever machine you are using you can write there I am using Ubuntu so I will write Ubuntu if you are using Windows you can write Windows okay and it will take you to this page and you can see this is the official page of jelkins we will go here okay and here you can see whichever machine you are you want to install on either be it War file even you can like follow the steps every step is given okay so prerequisite you can see 256 MB of ram but trust me at least like 2GB of RAM is required to run Jenkins properly and here it is written 1GB of dry space okay but like more than 10 it is required because you are doing to do lots of things okay okay now you can see like we have LTS release or weekly release so I am going to install LTS because it is like stable release okay also like before installing you should always keep a Java installed on your system so first I will do install Java okay so let's copy the command and let's paste it here so I want to use Java 11 which is given here and we are going to use that only okay so once it completes then we will install Java and then we will go ahead with installation of Jenkins okay okay so this is done let's install jdk yeah okay meanwhile let me show you if you want to install on Windows that also step is there like maybe exe file is there which you can download and click on next next step next and all those things and it will install Okay so that is like little easier but in case of Linux we need to run several commands Okay okay so yeah it is still running meanwhile I will copy the command so copy this first line this okay so it's 70 percent almost completed and and also one more thing I should say to you like once this this once you have completed watching this video quickly go on your system and start installation and start working with Jenkins so that you will get a better understanding okay okay so yeah 94 95 100 done okay so it's unpacking the zip file see we can even install directly through Jenkins but like this is a prerequisite sort of thing so if you have Java installed then it works fine okay yeah so this is done let's paste the next command okay and then we have this it's always better to install a LTS version because they are like much more stable than the normal like latest or any other version so it's better to install latest LTS version okay okay yeah so one last command is pending let's copy this as well and paste it here it will install around 100 or 91 sort of MB file yeah 99 MB okay so you can see it is connecting to package jar file will be copied also whatever builds we are going to create those workspace will be inside it okay so let's keep this permission okay let me come out we are already inside the machine yeah so here we will provide the permission on this Jenkins folder okay this is done and here you can see even Java is installed okay so let me close this one okay now what we need to do we will go inside the Jenkins folder clear the screen here we need to create private and public Keys okay so I will run the command as SSH hyphen Keygen click enter and you can see it is asking to create the keys inside root slash dot SSH so we will go ahead we don't want to like provide any pass press we will click enter and this is created okay so now what I will do I will go go inside the that the location where the private and public keys are created okay slash root slide dot SSH sorry about that SSH yeah now if I run the ls command you can see authorized Keys public private key public key okay so let's open okay let me clear the screen yeah so first let's open the private key okay then we have a public key okay okay so private key we are going to use as a key inside as a credential inside our Jenkins server so let's copy the this one and remember that we have created our SSH Keys using root user so using the same user we will create the configuration here okay so basically go to manage junkies then go to credentials and here click on domain global credentials and kind will be SSH username with private key okay so username we will keep it as root and here enter directly the key yeah key is there just click on create okay let me just rename to add description as well description will be private Dash key okay okay so this is done we can see it is available now okay now what we need to do is create a node okay so here we will go to manage nodes and Cloud click on new node provided in node name so we will provide as test Dash node select as permanent agent click on create okay here number of executors basically it means the number of pipeline you want to run simultaneously at the same time that means let me just open it in a duplicate page to show you yeah if we go to dashboard you can see as of not two executors available that means we can run two pipeline jobs at the same time okay but if you have big machine you can like make any number of executors so for example I want to keep it as three so I want to that means I want to run or I will be able to run three jobs at the same time okay now we need to provide the root directory that means the location where all the builds that will be creating will be kept okay so in my case I will provide the name as Uber home open two slash Jenkins what was the path we can just see here Jenkins Dash sleeve okay Dash slave and inside it our machine our workspace will be created for Jenkins job label is the way to define or like a filter out the slave okay that means we can provide a label as for example slave dash one sorry two so that means if we mention slave 2 label in our job all the jobs will be running inside on this machine okay and usage I want to keep it as run only when defined using labels okay launch method we will use as SSH and host so IP address of the machine is this one okay so we will paste it here credentials will be root and here we will select non-verify verification status okay yeah so click on Save and let's see what happens it will give some error but we will fix it okay so you can see it is saying offline so let's open it if you see the error it is unable to uh like authentication field so that means it is unable to like authenticate using the key way provided okay no issues we will first of all we will make this node temporary offline okay now go back to the machine here and now let's say we want to paste this public key inside authorize Keys okay so let's copy this once copied we will edit our authorized key okay and press I for insert okay okay this is not going down like that no issues we will go in this way only okay basically we need to provide the public key here so that it can like uh do the authentication successfully okay click enter now and here we will paste okay so we have pasted the uh that public key now we will save it and exit okay now we will go back to our Jenkins and click on bring this node back online click on this and launch agent okay now you can see here if I scroll upside authentication is successful now okay and machine B machine is Agent is successfully connected and online okay now if we go to dashboard here you can see three executors added inside the test slave or test agent that means on this agent we can run three pipelines at the same time okay okay now what we can do we can start creating jobs so in this section what I am going to show you I will show you all the most important kind of jobs that is freestyle job pipeline job then multi Branch job these three jobs you must know how it works okay also before like starting with the job we need to like install certain tools like jdk and Maven and all those things okay so for that first of all we will go to manage plugins here go to available plugins okay so sonar scanner we already installed now we will we will install jdk select this and we will select this one click on install without restart meanwhile jdk is getting installed we can like search for other plugins so for example Maven already is there and now we need to have Docker as well okay because we are going to run Docker commands so let's select these ones the pipeline builds type okay this much is fine and start without restart one more plugin one more is a security plugin which we will be needing okay oasp so this is the plugin that we will be needing okay so once this is like like installed uh all of the plugins then we can start configuring them okay so I think we can start with the Java configuration we can go back to Global tool configuration scroll down to jdk provide a name as jdk11 we are using jdk 11 and here select install automatically so that it can install using the tools okay so we have like install this plugin click on it select version 11 okay and scroll down sonar Cube already be configured we need to configure Maven okay so let's provide name as Maven 3 version I want to use is 3 io it's little bit like slower that's why it is downloading little bit slow even though it's just 99 MB okay so it's completed okay see all these steps that I am using from there I will mention in the description also so you can install okay okay so let it install it will take one or two minutes I think so once it completes what you need to do is scroll down and we might have three commands to start Jenkins okay basically to check the status of Jenkins and make sure that Jenkins is enabled so let's copy this and okay it's still going on yeah okay so then let me clear the screen and let's paste the command see this will this command will enable Jenkins okay then we will start the Jenkins let's paste this one okay Jenkins started and now just to confirm that we have installed successfully we will run this command to check this status okay status and you can see Jenkins is running and it is running on port 8080 okay it can be changed if you want but by default like 8080 is good okay so what I will do I will just Ctrl C close this and next what we can do is copy the IP address of the machine on which we have installed copy that and provide the port 8080 click enter now you can see it has come to the Jenkins page now to first like first you need to provide the administrator password which is available on this file so we will copy the address write the command as cat at command is used to view the view the content and provide the path enter you can see this is the uh password which we are which we need to start Jenkins okay so I will paste it here click on continue okay now on this page you have two options for customization one is to install suggested plugins and second to install like the select the plugins you want to install but my my suggestion is always go for the first option because it installs the really required plugins which are going to be used and here you will get confused while selecting the plugins so we can just install the suggested ones okay and later we can install more plugins based on the requirement that is the best approach in my way okay okay so you can see like it has started the progress and this will take little bit of time depending on the speed that you are having okay so we will wait for it to complete and meanwhile I will speed up the little this part of the video so that we don't waste too much time okay okay so as we can see it is almost completed now okay now okay so here we need to provide the information like a username password you can skip even but it is better to provide because if you log out from Jenkins again you need to like start over again so it's better to set up a password so I will provide the username this one password will be admin and again password will be admin okay so full name you can provide anything you want and Here Also let's provide any email and we are good to go we can click on Save and continue and this is like how and here you can see it will show you the URL also on which you can access Jenkins so we will just click on Save and finish now Jenkins is ready okay so start using using Jenkins okay now what I'm going to do is to explain you every single important feature in Jenkins also side by side I will show you some of the best tricks that you could use in Jenkins to like perform little bit efficiently Okay so let's start with the Jenkins okay team so once you complete the installation process this is the first page that you will be seeing okay so in this section I will walk you through all the important features of Jenkins okay okay so this is the first page and you want to create your first job you can either click create a click here or you can click on this new item okay so we will do it later but first let me just show you all the features of Jenkins okay so most important part of Jenkins is manage Jenkins if I click on it this is basically settings part of Jenkins okay all the settings that you will do maybe it to install a new uh tool or like to configure anything everything will be done in manage Jenkins okay okay so first one is configure system let me open this see the configure system is the place where where you are going to configure any new server okay so let's say like you want to deploy uh you want to perform sonar Cube analysis it's the code quality check tool so first of all like you you want to configure sonar Cube URL okay so that you can do in these places okay and basically like wherever like all these server that are you that you are going to use in Jenkins you will be configuring in in here okay which I will show you in some time okay first I am just telling you what this section is used for so configure system is used for configuring the servers okay I will show you one when I configure this one R Cube okay then in manage Jenkins we have Global tool configuration so this is the section where you are going to configure tools configure system in configure system we are configuring servers in global tool configuration we are configuring tools okay for example jdk so if I click on here it will like it will ask you like in what way you want to install and which version you want to install it will ask and all those things okay so we will do these things once let me just walk you through first okay so you can see git installation then we have Gradle and Maven so everything like these these are the tools that we can configure or set up in global tool configuration got it okay then we have next one which is in manage plugins so whenever we want to install any new tool or technology in Jenkins so we want to integrate something we need to install a tool of that we need to install a plugin of that tool okay so here is this section you can see available plugins if I click on it all the tools whichever you want to install for example I want to perform sonar Cube analysis so I will search for sonar and you can see first option that comes is sonar Cube scanner so I will check it click on it and two options available install without restart download now and install after restart so I will select install without restart once I click on it it will take me to this page and this is the page where I can track the progress how long it will take you can see it has installed and it is now loading plugin extensions okay so and so soon our cube is installed okay and as soon as I installed sonar Cube if I go back to manage Jenkins as I said sonar cube is a tool and Global tool configuration is the place where we configure tools here you can see now sonar Cube scanner tool uh like configuration is visible if I want to configure what we can do we can provide a name like sonar scanner scroll down and here you can select any version you want so I will go with latest that's all and that is how you configure a tool in Jenkins okay so you got you understood like Global tool configuration manage plugins configure system I will show you Hands-On in the in a minute when we start with the pipeline okay next we have manage nodes and clouds so let me open that as well okay so as of now you can see this is built in node node is like a machine or VM or a slave in Jenkins words like it is a machine on which you will execute your code when when I say execute your code that is like we will build our application perform different tasks so all those things will be performed on a machine okay as of now it's just built-in machine so okay so and also like if you want to configure a new VM you can like provide a name and configure that as well so that also I will show you I won't leave anything I will show you every single thing that is available in Jenkins okay so I hope you understand this point like manage notes and clouds is the place where you add a machine as a slave add a VM as a slave okay okay scrolling down to the globe configure Global Security let's open this also this is the most like security aspect of the Jenkins usually I suggest not to go inside here until it is like very necessary okay so it's just you leave it as it is you don't need to make make changes here it is better in that way okay then we have credentials which is also very important so you know like when we configure any new tool or technology in Jenkins you need to provide an authentication to that okay so that like you you're providing username password for any like tool or server we come here manage any credentials and you can see here like as of now nothing is there in credentials you can see nothing is there okay and you can see there are two Scopes one is global one is system always go for Global because if you want a credential to be used on like all the projects all the jobs in Jenkins you should go for Global scope so click on that and you will find this page then we will click on ADD credentials okay now let's say we have username password then in kind it will be username password here you will provide username password little bit description and create in case you just want to configure a token you can select secret text similarly you want to use certificate you can select this then we have GitHub app so like multiple options are available okay depending on which like with which kind of credential you want to add for example let's select username password and I want to add my Docker credentials which we are going to use later so I will provide the username then then password we can provide here right this one okay and description I can provide as Docker Dash grid okay and create now if I create it you can see like an ID is generated and this credential is configured okay okay coming back to manage Jenkins so these are like the most important most important aspect of Jenkins settings one last setting that I find very useful is manage users from here you can add any user provide their own like username password and like details okay and you can add another user okay water now see these options are there but these are like not not mostly used so you don't need to like waste time there most important things are these only like manage plug is a global tool configuration configure system manage nodes and clouds configure Global Security but we should not touch that then we have credentials and manage users okay so this is the settings part of Jenkins okay now if we come back to Jenkins from here as I mentioned like uh from here we can create jobs okay so before creating job what I want to show you is how we are going to add a new node new node or executor or slave anything you want you can call it so as of now you can see we are having two executor one two okay now let me show you how I am going to configure a new VM to Jenkins which we will going which we will use as a as a slave in Jenkins okay so let me show you that okay team so to add a VM as a Jenkins slave or agent first of all we need to have a VM so I have just created this Ubuntu machine with very small like resources okay and I have connected it here okay so the prerequisite for adding a VM as a slave first of all you need to install jdk so I will just paste it here and install it okay so this is going to download meanwhile it's downloading I will open the same machine in a new page and I need to create a folder okay so let just do that sudo Sue So currently we are in home slash Ubuntu machine so we will create One Directory which will be mkdir Jenkins best sleeve okay so let's go inside it okay now let me provide permission so that remoting com because we are going to use credit some of the projects from GitHub okay okay so we can use which project let me go to my repositories and we have shopping cart so shopping cart is an application which is having front-end backend as well as a small database H2 database so this is probably the best application we should use here okay so we will copy the URL and here we need to add it okay okay so since we are following devsecops so we should follow best practices which means since like multiple jobs will be creating so I just want to keep two jobs maximum in history so that will occupy very less number of space which is a part of best practice okay now here when you like create a job then scroll down and first thing that you need to do is add your source code so my source code is on GitHub so Source in source code management section we will select git here we'll provide URL okay and here we need to provide credentials so let's click on this username will be this one two four six and here we need to provide the password okay so let's write the password let me check the password okay so okay so password will be yeah and in description we can provide git Dash grid click on ADD and you can see like as of now it is giving 128 error 128 basically means unauthorized or 401 because we have not provided the credentials okay so like knowing the codes is also very helpful when troubleshooting okay so in credential we will select get grid [Music] this is one second let me try to log into just to check if the credentials is correct or not okay signing in username is this one password is zero click on sign in our credentials are correct okay let me just check if credential is correct or not if I go back to here manage Jenkins then credentials and this one see credentials update also we can do okay in case we want to like change the password or something so we can do that 0 okay save okay well okay let me just save this okay now if I refresh then we can yeah okay no issues it is showing error okay one second one second error is something else support for password authentication was removed on August 13 okay no issues see the issue with Git gitlab or GitHub we cannot authenticate in Jenkins through password we need to use a personal access token okay so that I will create now for that like you can go to your report like profile go to settings and on left side you can see developer settings and then we have personal access tokens token classic generate new token I will just provide one expiration is this much I will give all the access for now later I will be removing all the access okay so temporary I can give just all the access just for this demo okay okay yeah generate token and we will copy this okay go back here now we will update one last time instead of a password we will provide the token okay provided click on Save and if we refresh here the error should not be coming more yeah you can see now 128 error is not coming anymore okay okay now repository we have added next we need to Define which branch we want to build okay for example if I go back here where is my project sorry it is late okay shopping cart okay whatever is it uh Branch name okay so Brand's name is main so we can just provide the name as Main and rest everything this one is like this this will we will leave it as it is okay then we have built triggers in case you want to like build uh remotely that you can do but usually everything is goes just like using the web hook or like manual okay so we will go with manual only so in build step that is the most important step where you will configure uh like watch what what kind of commands you want to run okay so I will select Maven so for Maven you you can see like all these different options are there but for Maven you need to select invoke invoke top level Maven targets okay and here another three we have already installed and let's say I want to run the command as clean package okay okay let's click on apply and one more thing I want to show you which is where it is see this option you are seeing restrict where this option can be this project can be run so here we need to provide level in case we are having multiple uh machines and we want to run our project on specific machine that level we can provide for example recently I just configured one machine slave two you can see level is visible okay so if you want to run your project on that you can just like provide the label here and the project will be run on that okay so as of now we will not do that because several tools we have not installed on that machine so for now I will just click on apply and Trigger the job okay so click on build now and from here your job will be started and the progress you can see here okay also yeah let's just open it and track the progress you can see it has started downloading the dependencies that is required to build the project also note that we are still in freestyle job okay once this completes then we will start with our declarative pipeline okay okay some okay test case error okay so in case like if if our project is having like a failed test cases and we want to run our project irrespective of that what we can do we can like avoid running the test cases for that like we are having this command d skip these are sort of like parameters which we can you use okay test equal to true that means it will skip the test cases okay if I click on apply and again if I click on build now so again here you will see also like not more than two histories you will be able to see because I have like selected the option discard all the builds okay so let's open it again and you can see it is Success now if I scroll down you can see it was able to execute and everything went fine claim package ran okay if we go back to our project to yeah so these three commands I ran clean package okay so we wanted to build the application in the uh and the like artifact to be generated inside Target folder which we did using this clean package command and we skipped the test cases okay now what I want to do I want to show you like where you can see the like file generated and all so on left side you can see there are multiple option delete project configure configure in configure basically you can like go back to the configuration of the project page okay but we have this workspace if I click on it this is the location where the like byproduct or the generated artifacts will be created okay and you can see there is a folder created as a Target if I click on it you can see inside shopping cart snapshot dot jar so this is the artifact which is generated by running this application okay so this was freestyle John okay now I want to show you is a pipeline job in which we will be adding eight or nine stages and in that using that pipeline so we will deploy the application completely to a Docker server okay okay team so basic freestyle job we have created now we will move on to declarative pipeline because freestyle job is not too much preferred okay in corporate world most of the places like declarative pipeline is preferred and in the interviews also they will ask you stages from declarative one okay so we will click on new item also in declarative pipeline I will show you everything from like compiling building the application then running different security scans as well as deploying the application okay so we will create the will provide a name as pipeline okay and select the option as pipeline then click on OK now we have like the job is created we need to configure it okay so first of all I will select discard all bits to keep just two number of builds in the history then scroll down and here we will be writing our script so let me expand it little bit okay so if you are like doing it for the first time always go for hello world it will create a basic structure and you can like using this format using this structure you can create your pipeline so first stage usually okay let me first explain to you the structure see whole script goes inside a pipeline okay so after pipeline will be having the braces and hold the pipe a whole script will be going inside it then we have agent any that means if we are we we are like I I explained you that there is an option known as label when we create an agent so that level you can configure here but if it is written as agent any that means whichever machine is available it will run on that okay and then we have stages okay so inside stages we have one stage as of now so first of all we need to provide a proper name for a stage and no two stage can have the same name if they are having same name then it will fail the job will fail okay so first stage with name will be git checkout and basically this is the stage using which a local copy of source code will be created inside Jenkins okay so also like in case you are very not very good at like writing pipelines you can take help from pipeline syntax it will help you generate this script okay so first script that we need to write inside steps we will generate it from here so we will open pipeline syntax then click on git okay and here in repository URL we will provide the URL copy this one URL branches Main in my case and credentials we have already added which is a git grid okay and let's uncheck these two options and click by generate now we will copy the script that is generated here and simply paste it here okay so now first stage is complete now SEC for second stage what we can do we can copy this create a clone of this one now we can change the name so first thing that I want to run with my mavenger is to perform compile compile okay so we need to run the command as Maven clean compile and when you need to run shell commands on Jenkins you need to enclose them inside sh in this format uh sh in double quotes now I want to run the command as mvvn clean compile compile also like since test cases is having some issue in my project so I will skip those okay test D skip tests equal to true now we have we want to run Maven command so we are calling the execute table mvn but it will fail okay so to make sure that job doesn't fail we need to provide the or we need to Define our tool whichever we want to use in our pipeline in in the above section above stages okay how to define a tool so as the in the beginning you saw that we configured two of the important tools first is jdk 11 then Maven 3  okay so let's wait for it to complete yeah so next command would be this one Docker restart then we have need to make sure that even our other users other than root also can run the docker commands so for that I'm running these specific commands Okay also like in case like you are wondering how to watch this video so it's better to follow the timestamps because every single thing I will mention in timestamps and you can follow the timestamps to save as much time as possible okay one last command okay just to see the progress yeah so here you can see it's all like in 2023 and downloading the details from that year meanwhile we will what I will do I will create a container foreign and Port would be ninth what would be nine thousand and image we want to use as sonar Cube LTS versions on our Cube colon LTS Dash community let it run so okay we will go back to our job and you can see here a little bit detail about like what exactly dependency check is used for okay and here you can see analysis has started okay see you are seeing in the status as unstable because like we have it is it is having xmls also format of the report as well as HTML okay so what I am going to do is remove the HTML thing and simply click on Save and build now okay so build will start and this previous time it took like three minutes now it it should take like it uh like few seconds only okay meanwhile we can see like our that also started what is that our sonar Cube machine so to access that we can copy the IP address then go to Port 9000 click enter and you can say sonar cube is starting okay this is good and you can see OS which can completed now just to see the report we can go here and go to workspaces then pipeline then here you can see HTML as well as XML both generated now okay so this is good now just to make sure that sonar we want to run sonar Cube analysis as well okay so it is it is still starting and you can see like at least like all the stages that we are running now is running fine so see sonar cube is started and the by default password is admin admin so we will put that admin admin also remember I told you that I will show you how to configure in that configure system of section of the Jenkins so that in using this tool I will I'm going to show you okay this this and yeah and second admin see first thing in sonar Cube that we need to do is go to Administration security users and we need to generate 10 token generator token that is going to be used for authentication in Jenkins so provide a name and click on generate now we will use this token to create like add in our credentials so go to manage Jenkins again go to credentials and here again Global domain click on ADD credentials since since it's a token so kind will be secret text so we will paste it here description will be sonar sorry about that so now click on create now token is created now we can configure our sonar Cube server in configure system open here so since we have installed the tool as well so there should be one option available for sonar Cube servers you can see here so in our Cube installations we will click on ads on our Cube provide a name so I will provide the name of sonar Dash server and default URL so before that we will select the authentication token which we just configured and URL of sonar Cube could as well as sonar Cube will be this one till 9000 paste here click on Save done okay great so now we will add our next stage which is sonar Cube so let's get back to the pipeline so we will copy this stage and create a clone of it so that we can configure our sonar Cube stage so here as I told like no two stages can have the same name so sonar Cube okay and for this one see before running executing the sonar Cube things we need to like as I did as I told like every tool we are going to use we need to Define and in our pipeline so Maven and jdk already installed already default defined so now it's time for sonar Q so we will create an environment again then curly braces inside this we will provide a let me just check the commands if it is correct or not yeah you can see here in vomit we need to create like this okay we will go back Jenkins let me explain it to you so we have created an environment for the tools on our scanner which we configured in global tool configuration okay so a home path basically we need to configure and then again rest of this script is see let me explain that as well copy this one and let's paste it in steps okay now see here with sonar Cube environment so basically how we generate the small code let me show you using pipeline syntax here we should be able to see with sonar Cube environment some option you can see here select the token but token we need to like make some changes which I will show you okay see credentials ID it is written here right but instead of this credential ID what we need to write is the name of sonar Cube installation it's an R Cube installation that we configured in in that configure system let me show you again if I go to manage Jenkins then configure system if I scroll down you can see where is it yeah Sonar cubes Solutions so name I configured as sonar Dash server okay let's copy this and paste it here okay now see the environment we Define the Home Path this is the executable we are calling the executable of sonar Cube scanner tool okay now here we need to provide the name these are arguments okay D sonar dot project dot project name so name I will provide a shopping Dash cart okay then we have d d sonar dot Java dot batteries the path of uh binaries I will just put a dot so that it means like it is available on root root location okay then we have project key project key you can provide anything but just to make sure everything is in sync will provide the name same as our project name okay and one more thing that you need to understand to write like shell command in multiple lines we can use three post office comma okay three so you can see line by line we have written now I can click on apply and this should run also in case you are wondering for this script I will I will like make this available in the description so you can get it from there okay okay so let's scroll down and it is in OS dependency check stage analysis complete okay and now it is running the sonar Cube analysis stage okay this should be completed within few seconds I guess so let's wait for it C analysis is successful now you can see analysis is successful if I go back to pipeline here we can see all these stages are successful and if I go back to sonar Cube you can see here as well Let me refresh one more time yeah okay in case you are wondering what is sonar Cube so sonar cube is also a security tool which is used to find out bugs vulnerabilities code smell technical debt these kind of things in your source code and as of now you can see it found found out 28 bugs in our source code seven code smells and total number of lines it's scanned in the like repository is 1